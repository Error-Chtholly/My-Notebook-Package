//System using.
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TaskbarClock;

//Program namespace.
namespace Notebook
{
    //Main from.
    public partial class Notebook : Form
    {
        public delegate void Settings(Control control, Color color);

        //Constructor function.
        public Notebook()
        {
            InitializeComponent(); //The code you must use to design the form,do not update it.
        }


        //-------------------------------------------------------
        //The code of ToolBar and Menu.
        //Software Status.
        private void statusStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            //Not use.
        }

        //Resave File in List.
        private void 另存为AToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Already used the click on Resavefile.
        }

        //Save File in List.
        private void 保存SToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
            saveFileDialog.Title = "保存文件"; //Set the SaveFileDialog form's name.
            saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to save.
            if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
            {
                //MessageBox.Show(openFileDialog.FileName);
                string path = saveFileDialog.FileName; //Define the path of the file.
                txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                txtMain.Clear(); //Remove the text in the txtMain Container.
                MessageBox.Show("文件成功保存到路径：" + path, "Result"); //Show the result of the saving.
            }
        }

        //Exit Software in List.
        private void 退出XToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit(); //Exit all the forms belong to the software.
        }

        //New File.
        private void newfile_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show("系统提示：是否要新建文本并保存您当前编辑的文件？保存请在保存界面选择路径和文件类型进行保存，放弃新建请点击取消或关闭窗口。", "Warning", MessageBoxButtons.OKCancel); //System prompt.
            if (dr == DialogResult.OK) //Condition of OK.
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
                saveFileDialog.Title = "是否要保存当前文件？"; //Set the SaveFileDialog form's name.
                saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to save.
                if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
                {
                    //MessageBox.Show(openFileDialog.FileName);
                    string path = saveFileDialog.FileName; //Define the path of the file.
                    txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                    MessageBox.Show("文件成功保存到路径：" + path, "Result"); //Show the result of the saving.
                    txtMain.Clear(); //Remove the text in the txtMain Container.
                }
                else //Else condition.
                {
                    MessageBox.Show("您已放弃对当前文件的保存!", "Warning"); //Show the result of the saving.
                    txtMain.Clear(); //Remove the text in the txtMain Container.
                }
            }
            else //Else condition.
            {
                //Do nothing.
            }
        }

        //Tool Box.
        private void toolStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            //No use.
        }

        //New File in List.
        private void 新建NToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show("系统提示：是否要新建文本并保存您当前编辑的文件？保存请在保存界面选择路径和文件类型进行保存，放弃新建请点击取消或关闭窗口。", "Warning", MessageBoxButtons.OKCancel); //System prompt.
            if (dr == DialogResult.OK) //Condition of OK.
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
                saveFileDialog.Title = "是否要保存当前文件？"; //Set the SaveFileDialog form's name.
                saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to save.
                if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
                {
                    //MessageBox.Show(openFileDialog.FileName);
                    string path = saveFileDialog.FileName; //Define the path of the file.
                    txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                    MessageBox.Show("文件成功保存到路径：" + path, "Result"); //Show the result of the saving.
                    txtMain.Clear(); //Remove the text in the txtMain Container.
                }
                else //Else condition.
                {
                    MessageBox.Show("您已放弃对当前文件的保存!", "Warning"); //Show the result of the saving.
                    txtMain.Clear(); //Remove the text in the txtMain Container.
                }
            }
            else //Else condition.
            {
                //Do nothing.
            }
        }

        //Welcome.
        private void 欢迎toolStripButton_Click(object sender, EventArgs e)
        {
            Welcome welcome = new Welcome(); //Public a class called welcome.
            welcome.ShowInTaskbar = false; //Let this form not show in the taskbar.
            welcome.ShowDialog(); //Show the form.
        }

        //About in List.
        private void 关于AToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FormAbout FormAbout = new FormAbout(); //Public the class calls FormAbout.
            FormAbout.ShowInTaskbar = false; //Let it can not be showed in the System Taskbar.
            FormAbout.ShowDialog(); //Let this botton link to the FormAbout and can not be covered if you do not close it.
        }

        //Search.
        private void 查找toolStripButton_Click(object sender, EventArgs e)
        {
            string searchText = toolStripTextBox1.Text; //Define a string data called searchText to read the text of SearchTextBox.
            txtMain.Find(searchText); //Use the system function called Find on the editor to locate the text you want.
        }

        //Amplify the fontsize.
        private void 放大toolStripButton_Click(object sender, EventArgs e)
        {
            string fontstyle = txtMain.Font.Name; //Get the fontstyle of the editor. 
            float fontsize = txtMain.Font.Size; //Get the fontsize of the editor.
            fontsize = fontsize + 1; //Add 1 to fontsize.
            Font font = new Font(fontstyle, fontsize); //Define a new font of the editor.
            txtMain.Font = font; //Use the font.
        }

        //Reduce the fontsize.
        private void 缩小toolStripButton_Click(object sender, EventArgs e)
        {
            string fontstyle = txtMain.Font.Name; //Get the fontstyle of the editor. 
            float fontsize = txtMain.Font.Size; //Get the fontsize of the editor.
            fontsize = fontsize - 1; //Delete 1 to fontsize.
            Font font = new Font(fontstyle, fontsize); //Define a new font of the editor.
            txtMain.Font = font; //Use the font.
        }

        //Add the time now in the editor.
        private void 当前时间toolStripButton_Click(object sender, EventArgs e)
        {
            string time = System.DateTime.Now.ToString(); //Define the time and use the system time.
            if (txtMain.Text == string.Empty) //Condition of editor is empty.
            {
                txtMain.AppendText(time); //Add the time now after the text it already exit.
                txtMain.AppendText("\n"); //Wrap.
            }
            else 
            {
                txtMain.AppendText("\n"); //Wrap.
                txtMain.AppendText(time); //Add the time now after the text it already exit.
                txtMain.AppendText("\n"); //Wrap.
            }
        }

        //Software Introduction and Help.
        private void help_Click(object sender, EventArgs e)
        {
            Software_Introduction softwareIntroduction = new Software_Introduction(); //Public the class calls Software_Introduction.
            softwareIntroduction.ShowInTaskbar = false; //Let it can not be showed in the System Taskbar.
            softwareIntroduction.ShowDialog(); //Let this botton link to the Software_Introduction and can not be covered if you do not close it.
        }

        //Update logs.
        private void 更新日志toolStripMenuItem_Click(object sender, EventArgs e)
        {
            Update_Logs updateLogs = new Update_Logs(); //Public the class calls Update_Logs.
            updateLogs.ShowInTaskbar = false; //Let it can not be showed in the System Taskbar.
            updateLogs.ShowDialog(); //Let this botton link to the Update_Logs and can not be covered if you do not close it.
        }

        //Openfile.
        private void openfile_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog(); //Public a new class of OpenFileDialog.
            openFileDialog.Title = "打开文件"; //Set the OpenFileDialog form's name.
            openFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to open. 
            if (openFileDialog.ShowDialog()==DialogResult.OK) //Set a condition to determine if you click the botton of OK.
            {
                //MessageBox.Show(openFileDialog.FileName);
                string path = openFileDialog.FileName;
                txtMain.LoadFile(path, RichTextBoxStreamType.PlainText); //Let the file you choose display in the richTextBox calls txtMain.
                //This system method needs both the path of the file which you open and the class of the file you want to display in the container. 
            }
        }

        //Openfile in List.
        private void 打开OToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog(); //Public a new class of OpenFileDialog.
            openFileDialog.Title = "打开文件"; //Set the OpenFileDialog form's name.
            openFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to open. 
            if (openFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
            {
                //MessageBox.Show(openFileDialog.FileName);
                string path = openFileDialog.FileName; //Define the path of the file.
                txtMain.LoadFile(path, RichTextBoxStreamType.PlainText); //Let the file you choose display in the richTextBox calls txtMain.
                //This system method needs both the path of the file which you open and the class of the file you want to display in the container. 
            }
        }

        //Savefile.
        private void savefile_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
            saveFileDialog.Title = "保存文件"; //Set the SaveFileDialog form's name.
            saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to save.
            if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
            {
                //MessageBox.Show(openFileDialog.FileName);
                string path = saveFileDialog.FileName; //Define the path of the file.
                txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                txtMain.Clear(); //Remove the text in the txtMain Container.
                MessageBox.Show("文件成功保存到路径：" + path, "Result"); //Show the result of the saving.
            }
        }

        //Resavefile.
        private void resavefile_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
            saveFileDialog.Title = "另存为文件"; //Set the SaveFileDialog form's name.
            saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to resave.
            if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
            {
                //MessageBox.Show(openFileDialog.FileName);
                string path = saveFileDialog.FileName; //Define the path of the file.
                txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                txtMain.Clear(); //Remove the text in the txtMain Container.
                MessageBox.Show("文件成功保存到路径：" + path, "Result"); //Show the result of the saving.
            }
        }

        //Fontset.
        private void Fontset_Click(object sender, EventArgs e)
        {
            FontDialog fontDialog = new FontDialog(); //Public a new class of FontDialog.
            fontDialog.ShowColor = true; //Let the fontdialog can show color choose.
            if (fontDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the button of OK.
            {
                Font font = fontDialog.Font; //Public a new class of font.
                txtMain.SelectionFont = font; //Let the selected text use the font you choose.
                Color color=fontDialog.Color; //Public a new class of color.
                txtMain.SelectionColor = color; //Let the selected text use the color you choose.
            }
        }

        //Print preview.
        private void printpreview_Click(object sender, EventArgs e)
        {
            //PrintPreviewDialog printPreviewDialog = new PrintPreviewDialog(); //Public a new class of PrintPreviewDialog.
            printPreviewDialog.Document = printDocument; //Set the printDocument.
            printPreviewDialog.ShowDialog(); //Show the form of printPreviewDialog.
        }

        //Print.
        private void printfile_Click(object sender, EventArgs e)
        {
            //PrintDialog printDialog = new PrintDialog(); //Public a new class of PrintDialog.
            printDialog.Document = printDocument; //Set the printDocument.
            printDialog.ShowDialog(); //Show the form of printDialog.
        }

        //Undo.
        private void undo_Click(object sender, EventArgs e)
        {
            txtMain.Undo(); //Undo the thing you do on the editor.
        }

        //Exchange text.
        private void 替换toolStripButton_Click(object sender, EventArgs e)
        {
            txtMain.SelectedText = toolStripTextBox2.Text; //Let the text selected in the editor exchanged to the text you input in the toolstriptextbox2.
        }

        //Redo.
        private void redo_Click(object sender, EventArgs e)
        {
            txtMain.Redo(); //Redo the thing you do on the editor.
        }

        //Cut.
        private void cut_Click(object sender, EventArgs e)
        {
            txtMain.Cut(); //Cut the text you select on the editor.
        }

        //Copy.
        private void copy_Click(object sender, EventArgs e)
        {
            txtMain.Copy(); //Copy the text you select on the editor.
        }

        //Paste.
        private void paste_Click(object sender, EventArgs e)
        {
            txtMain.Paste(); //Paste the text you select on the editor.
        }

        //Select all.
        private void selectall_Click(object sender, EventArgs e)
        {
            txtMain.SelectAll(); //Select all the on the editor.
        }

        //Exit software.
        private void exitsoftware_Click(object sender, EventArgs e)
        {
            Application.Exit(); //Exit all the forms belong to the software.
        }

        //Theme White.
        private void WhitetoolStripMenuItem_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.DeepSkyBlue; //Set the backcolor of menuStrip1.
            statusStrip1.BackColor = Color.DeepSkyBlue; //Set the backcolor of statusStrip1.
            menuStrip1.ForeColor = Color.White; //Set the forecolor of menuStrip1.
            statusStrip1.ForeColor = Color.White; //Set the forecolor of statusStrip1.
            toolStrip1.BackColor = Color.AliceBlue; //Set the backColor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the forecolor of toolStrip1.
            txtMain.BackColor = Color.White; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Theme Black.
        private void BlacktoolStripMenuItem_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.Black; //Set the backcolor of menuStrip1.
            statusStrip1.BackColor = Color.Black; //Set the backcolor of statusStrip1.
            menuStrip1.ForeColor = Color.White; //Set the forecolor of menuStrip1.
            statusStrip1.ForeColor = Color.White; //Set the forecolor of statusStrip1.
            toolStrip1.BackColor = Color.Gainsboro; //Set the backColor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the forecolor of toolStrip1.
            txtMain.BackColor = Color.White; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Theme Pink.
        private void PinkStripMenuItem_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.Thistle; //Set the backcolor of menuStrip1.
            statusStrip1.BackColor = Color.Thistle; //Set the backcolor of statusStrip1.
            menuStrip1.ForeColor = Color.Black; //Set the forecolor of menuStrip1.
            statusStrip1.ForeColor = Color.Black; //Set the forecolor of statusStrip1.
            toolStrip1.BackColor = Color.LavenderBlush; //Set the backColor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the forecolor of toolStrip1.
            txtMain.BackColor = Color.White; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Background color black.
        private void 背景色toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.Black; //Set the backcolor of editor.
            txtMain.ForeColor = Color.White; //Set the backcolor of editor.
        }

        //Background color white.
        private void 背景色toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.White; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the backcolor of editor.
        }

        //Background color pink.
        private void 背景色toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.LavenderBlush; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the backcolor of editor.
        }

        //Set the font of all text in the container.
        private void 编辑器字体设置toolStripMenuItem_Click(object sender, EventArgs e)
        {
            FontDialog fontDialog = new FontDialog(); //Public a new class of FontDialog.
            fontDialog.ShowColor = true; //Let the fontdialog can show color choose.
            if (fontDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the button of OK.
            {
                Font font = fontDialog.Font; //Public a new class of font.
                txtMain.Font = font; //Let the selected text use the font you choose.
                Color color = fontDialog.Color; //Public a new class of color.
                txtMain.ForeColor = color; //Let the selected text use the color you choose.
            }
        }

        //Menu background color black.
        private void 菜单栏toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.Black; //Set the backcolor of menuStrip1.
            menuStrip1.ForeColor = Color.White; //Set the forecolor of menuStrip1.
        }

        //Menu background color white.
        private void 菜单栏toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.White; //Set the backcolor of menuStrip1.
            menuStrip1.ForeColor = Color.Black; //Set the forecolor of menuStrip1.
        }

        //Menu background color pink.
        private void 菜单栏toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.Thistle; //Set the backcolor of menuStrip1.
            menuStrip1.ForeColor = Color.Black; //Set the forecolor of menuStrip1.
        }

        //Menu background color blue.
        private void 菜单栏toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            menuStrip1.BackColor = Color.DeepSkyBlue; //Set the backcolor of menuStrip1.
            menuStrip1.ForeColor = Color.White; //Set the forecolor of menuStrip1.
        }

        //Tool bar background color black.
        private void 工具栏toolStripMenuItem11_Click(object sender, EventArgs e)
        {
            toolStrip1.BackColor = Color.Gainsboro; //Set the backcolor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the backcolor of toolStrip1.
        }

        //Tool bar background color white.
        private void 工具栏toolStripMenuItem12_Click(object sender, EventArgs e)
        {
            toolStrip1.BackColor = SystemColors.Control; //Set the backcolor of toolStrip1.
            toolStrip1.ForeColor = SystemColors.ControlText; //Set the backcolor of toolStrip1.
        }

        //Tool bar background color pink.
        private void 工具栏toolStripMenuItem13_Click(object sender, EventArgs e)
        {
            toolStrip1.BackColor = Color.LavenderBlush; //Set the backcolor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the backcolor of toolStrip1.
        }

        //Tool bar background color blue.
        private void 工具栏toolStripMenuItem14_Click(object sender, EventArgs e)
        {
            toolStrip1.BackColor = Color.AliceBlue; //Set the backcolor of toolStrip1.
            toolStrip1.ForeColor = Color.Black; //Set the backcolor of toolStrip1.
        }

        //Editor background color black.
        private void 编辑器toolStripMenuItem15_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.Gainsboro; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Editor background color white.
        private void 编辑器toolStripMenuItem16_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.White; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Editor background color pink.
        private void 编辑器toolStripMenuItem17_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.LavenderBlush; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Editor background color blue.
        private void 编辑器toolStripMenuItem18_Click(object sender, EventArgs e)
        {
            txtMain.BackColor = Color.AliceBlue; //Set the backcolor of editor.
            txtMain.ForeColor = Color.Black; //Set the forecolor of editor.
        }

        //Status menu background color black.
        private void 状态栏toolStripMenuItem19_Click(object sender, EventArgs e)
        {
            statusStrip1.BackColor = Color.Black; //Set the backcolor of statusStrip1.
            statusStrip1.ForeColor = Color.White; //Set the forecolor of statusStrip1.
        }

        //Status menu background color white.
        private void 状态栏toolStripMenuItem20_Click(object sender, EventArgs e)
        {
            statusStrip1.BackColor = SystemColors.Control; //Set the backcolor of statusStrip1.
            statusStrip1.ForeColor = SystemColors.ControlText; //Set the forecolor of statusStrip1.
        }

        //Status menu background color pink.
        private void 状态栏toolStripMenuItem21_Click(object sender, EventArgs e)
        {
            statusStrip1.BackColor = Color.Thistle; //Set the backcolor of statusStrip1.
            statusStrip1.ForeColor = Color.Black; //Set the forecolor of statusStrip1.
        }

        //Status menu background color blue.
        private void 状态栏toolStripMenuItem22_Click(object sender, EventArgs e)
        {
            statusStrip1.BackColor = Color.DeepSkyBlue; //Set the backcolor of statusStrip1.
            statusStrip1.ForeColor = Color.White; //Set the forecolor of statusStrip1.
        }

        //Search text.
        private void 开始查找toolStripMenuItem_Click(object sender, EventArgs e)
        {
            string searchText = SearchTextBox.Text; //Define a string data called searchText to read the text of SearchTextBox.
            txtMain.Find(searchText); //Use the system function called Find on the editor to locate the text you want.
        }

        //Divide Line.
        private void 分隔线toolStripButton_Click(object sender, EventArgs e)
        {
            int EditorWidth = txtMain.Width / 15; //Get the width of editor.
            string DevideLine = new string('—', EditorWidth); //Set a string of '-' and use the width to calculate the length of the string.
            if (txtMain.Text == string.Empty) //Condition of editor is empty.
            {
                txtMain.AppendText(DevideLine); //Add the time now after the text it already exit.
                txtMain.AppendText("\n"); //Wrap.
            }
            else
            {
                txtMain.AppendText("\n"); //Wrap.
                txtMain.AppendText(DevideLine); //Add the time now after the text it already exit.
                txtMain.AppendText("\n"); //Wrap.
            }
        }
        
        //Change in the menu.
        private void ChangetoolStripMenuItem_Click(object sender, EventArgs e)
        {
            txtMain.SelectedText = toolStripTextBox3.Text; //Let the text selected in the editor exchanged to the text you input in the toolstriptextbox2.
        }

        //-------------------------------------------------------
        //The code of application using.
        //Do since closing the application.
        private void Notebook_FormClosing(object sender, FormClosingEventArgs e)
        {
            DialogResult dr = MessageBox.Show("系统提示：您是否要退出应用？若想要退出应用您可以选择保存，请在保存界面选择路径和文件类型进行文件保存，如若不保存请点击取消或关闭窗口并退出应用。如果您不想退出应用请点击取消或关闭窗口。", "Warning", MessageBoxButtons.OKCancel); //System warning to tell the user,and messagebox use the format of OKCancel.
            if (dr == DialogResult.OK) //Make the DialogResult's result to be the condition.
            {
                e.Cancel = false;
                SaveFileDialog saveFileDialog = new SaveFileDialog(); //Public a new class of SaveFileDialog.
                saveFileDialog.Title = "是否要保存当前编辑的文件？"; //Set the SaveFileDialog form's name.
                saveFileDialog.Filter = "文本文件|*.txt|DOC文档|*.doc|DOCX文件|*.docx|HTM文件|*.htm|HTML文件|*.html|CSS源文件|*.css|JavaScript源文件|*.js|C#源文件|*.cs|C语言源文件|*.c|C++源文件|*.cpp|Java源文件|*.java|Python源文件|*.py|R语言源文件|*.R|PHP源文件|*.php|所有文件|*"; //Set the class of file which you can choose to save.
                if (saveFileDialog.ShowDialog() == DialogResult.OK) //Set a condition to determine if you click the botton of OK.
                {
                    //MessageBox.Show(openFileDialog.FileName);
                    string path = saveFileDialog.FileName; //Define the path of the file.
                    txtMain.SaveFile(path, RichTextBoxStreamType.PlainText); //Save the file of PlainText on the path you choose.
                    MessageBox.Show("文件成功保存到路径：" + path + "\n感谢您的使用！", "Result"); //Show the result of the saving.
                }
                else //Else condition.
                {
                    MessageBox.Show("您已放弃对当前文件的保存!" + "\n感谢您的使用！", "Goodbye"); //Show the result of the saving.
                }
            }
            else //Make the DialogResult's result to be the condition.
            {
                e.Cancel = true; //Let the application can not be closed.
            }
        }

        //Start the timer when you open the application.
        /*private void Notebook_Load(object sender, EventArgs e)
        {
            Random random = new Random();　　//放循环体外初始化
            int figure = random.Next(1, 4); //随机生成1至4区间中的数字
            if (figure == 1) 
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4!更多详情请见帮助！\n时光荏苒，愿你有一天能与重要的人重逢。\nby Error","Welcome");
            }
            if (figure == 2)
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4!更多详情请见帮助！\n重逢的时候，希望你的梦不再支离破碎。\nby Error", "Welcome");
            }
            if (figure == 3)
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4!更多详情请见帮助！\n聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是时间。\nby Error", "Welcome");
            }
            if (figure == 4)
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4!更多详情请见帮助！\n有时回忆越美好，就越可能遭到回忆的反噬。但我认为，一个人没有回忆，反而是更悲哀的。\nby Error", "Welcome");
            }
            Time.Text = System.DateTime.Now.ToString(); //Show the time now in the Time Statuslabel.
            timer.Interval = 1000; //Set the timer's tick to be 1000ms(1s) between each other.
            timer.Start(); //Start the timer.
        }*/

        //The code using since you using the application.
        private void Notebook_Shown(object sender, EventArgs e)
        {
            Time.Text = System.DateTime.Now.ToString(); //Show the time now in the Time Statuslabel.
            timer.Interval = 1000; //Set the timer's tick to be 1000ms(1s) between each other.
            timer.Start(); //Start the timer.

            string TextLength = Convert.ToString(txtMain.Text.Length); //Get the textlength of the editor.
            string LineLength = Convert.ToString(txtMain.Lines.Length); //Get the linelength of the editor.
            行数字数toolStripStatusLabel.Text = "总行数：" + LineLength + "       总字数：" + TextLength; //Show the textlength and linelength in the label.

            int index = txtMain.GetFirstCharIndexOfCurrentLine(); //Get the index line of the editor.
            string NowLineLength = Convert.ToString(txtMain.GetLineFromCharIndex(index) + 1); //Convert the index line of the editor and add 1 value to string,if you do not add 1,the value is 0.
            NowLinetoolStripStatusLabel.Text = "当前行号：" + NowLineLength; //Show the index line in the label.

            string selectTextLength = Convert.ToString(txtMain.SelectedText.Length); //Convert the selectedtext in the editor to string.
            SelectTexttoolStripStatusLabel.Text = "所选字数：" + selectTextLength; //Show the selectedtext in the label.

            /*Random random = new Random();　　//放循环体外初始化
            int figure = random.Next(1, 5); //随机生成1至4区间中的数字
            if (figure == 1) //Conditions.
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4！更多详情请见帮助！\n时光荏苒，愿你有一天能与重要的人重逢。\n——by Error", "Welcome");
            }
            if (figure == 2) //Conditions.
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4！更多详情请见帮助！\n重逢的时候，希望你的梦不再支离破碎。\n——by Error", "Welcome");
            }
            if (figure == 3) //Conditions.
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4！更多详情请见帮助！\n聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是时间。\n——by Error", "Welcome");
            }
            if (figure == 4) //Conditions.
            {
                MessageBox.Show("欢迎使用My Notebook 1.1.4！更多详情请见帮助！\n有时回忆越美好，就越可能遭到回忆的反噬。但我认为，一个人没有回忆，反而是更悲哀的。\n——by Error", "Welcome");
            }*/

            Welcome welcome = new Welcome(); //Public the class of welcome form.
            welcome.ShowInTaskbar = false; //Let the form not show in the taskbar.
            welcome.ShowDialog(); //Show the form.
        }

        //Use the timer.
        private void timer_Tick(object sender, EventArgs e)
        {
            Time.Text = "当前时间：" + System.DateTime.Now.ToString(); //Use the timer to let the statuslabel called Time show the time now.
        }

        //Use the code since you enter the editor.
        private void txtMain_Enter(object sender, EventArgs e)
        {
            //No use.
        }

        //Use the code since the text in the editor changed.
        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {
            string TextLength = Convert.ToString(txtMain.Text.Length); //Get the textlength of the editor.
            string LineLength = Convert.ToString(txtMain.Lines.Length); //Get the linelength of the editor.
            行数字数toolStripStatusLabel.Text = "总行数：" + LineLength + "         总字数：" + TextLength; //Show the textlength and linelength in the label.

            int index = txtMain.GetFirstCharIndexOfCurrentLine(); //Get the index line of the editor.
            string NowLineLength = Convert.ToString(txtMain.GetLineFromCharIndex(index) + 1); //Convert the index line of the editor and add 1 value to string,if you do not add 1,the value is 0.
            NowLinetoolStripStatusLabel.Text = "当前行数：" + NowLineLength; //Show the index line in the label.
        }

        //Use the code since you click in the editor.
        private void txtMain_MouseDown(object sender, MouseEventArgs e)
        {
            int index = txtMain.GetFirstCharIndexOfCurrentLine(); //Get the index line of the editor.
            string NowLineLength = Convert.ToString(txtMain.GetLineFromCharIndex(index) + 1); //Convert the index line of the editor and add 1 value to string,if you do not add 1,the value is 0.
            NowLinetoolStripStatusLabel.Text = "当前行数：" + NowLineLength; //Show the index line in the label.
        }

        //Use the code since your mouse up in the editor.
        private void txtMain_MouseUp(object sender, MouseEventArgs e)
        {
            string selectTextLength = Convert.ToString(txtMain.SelectedText.Length); //Convert the selectedtext in the editor to string.
            SelectTexttoolStripStatusLabel.Text = "所选字数：" + selectTextLength; //Show the selectedtext in the label.
        }


        //-------------------------------------------------------
        //This zone of code is the function of add spectial corn.
        //String1.
        private void button1_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("µ"); //Add the text after the text you edit in the editor.
        }

        //String2.
        private void button2_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("δ"); //Add the text after the text you edit in the editor.
        }

        //String3.
        private void button3_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("ω"); //Add the text after the text you edit in the editor.
        }

        //String4.
        private void button4_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("θ"); //Add the text after the text you edit in the editor.
        }

        //String5.
        private void button5_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("ρ"); //Add the text after the text you edit in the editor.
        }

        //String6.
        private void button6_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("Ω"); //Add the text after the text you edit in the editor.
        }

        //String7.
        private void button7_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("π"); //Add the text after the text you edit in the editor.
        }

        //String8.
        private void button8_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("η"); //Add the text after the text you edit in the editor.
        }

        //String9.
        private void button9_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("ε"); //Add the text after the text you edit in the editor.
        }

        //String10.
        private void button10_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("θ"); //Add the text after the text you edit in the editor.
        }

        //String11.
        private void button11_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("λ"); //Add the text after the text you edit in the editor.
        }

        //String12.
        private void button12_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("√"); //Add the text after the text you edit in the editor.
        }

        //String13.
        private void button13_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∵"); //Add the text after the text you edit in the editor.
        }

        //String14.
        private void button14_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∴"); //Add the text after the text you edit in the editor.
        }

        //String15.
        private void button15_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("‰"); //Add the text after the text you edit in the editor.
        }

        //String16.
        private void button16_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∽"); //Add the text after the text you edit in the editor.
        }

        //String17.
        private void button17_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≈"); //Add the text after the text you edit in the editor.
        }

        //String18.
        private void button18_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≌"); //Add the text after the text you edit in the editor.
        }

        //String19.
        private void button19_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≠"); //Add the text after the text you edit in the editor.
        }

        //String20.
        private void button20_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≥"); //Add the text after the text you edit in the editor.
        }

        //String21.
        private void button21_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≤"); //Add the text after the text you edit in the editor.
        }

        //String22.
        private void button22_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("≡"); //Add the text after the text you edit in the editor.
        }

        //String23.
        private void button23_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∞"); //Add the text after the text you edit in the editor.
        }

        //String24.
        private void button24_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("←"); //Add the text after the text you edit in the editor.
        }

        //String25.
        private void button25_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("→"); //Add the text after the text you edit in the editor.
        }

        //String26.
        private void button26_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∩"); //Add the text after the text you edit in the editor.
        }

        //String27.
        private void button27_Click(object sender, EventArgs e)
        {
            txtMain.AppendText("∪"); //Add the text after the text you edit in the editor.
        }
    }
}

//The application continues to updating……
//Hope you can have a happy mood everyday.
//Bye.